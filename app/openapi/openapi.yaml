openapi: 3.0.1
info:
  title: Sensor Information System SIS
  description: This is the API of the REST service endpoints for managing sensor metadata.
  termsOfService: '#'
  contact:
    email: kotyba.alhaj-taha@ufz.de
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: "0.4"
externalDocs:
  description: 'Learn more about requests and responses in JSON:API specs'
  url: 'https://jsonapi.org/format/#fetching-includes'
servers:
  - url: http://localhost:5000/sis/v1/
    description: deployment
tags:
  - name: Platforms
  - name: Devices
  - name: Contacts
  - name: Events
  - name: Properties
  - name: Fields
  - name: Attachments
paths:
  /platforms:
    get:
      tags:
        - Platforms
      summary: Retrieve a collection of Platforms
      operationId: getAllPlatforms
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponsePlatforms'
        '500':
          $ref: '#/components/responses/InternalServerError'
      parameters:
        - name: filter
          in: query
          description: >-
            Retrieve devices after a specific attribute.
          schema:
            type: object
            properties:
              name:
                type: string
                description: the name of the field you want to filter on
                example: devices
              op:
                type: string
                description: the operation you want to use (all sqlalchemy operations are available)
                externalDocs:
                  description: sqlalchemy operations
                  url: 'https://flask-rest-jsonapi.readthedocs.io/en/latest/filtering.html'
                example: any
              val:
                type: string
                description: the key for fitering
                example: urn
        - name: include
          in: query
          description: >-
            You can include related object(s) details to responses with the querystring parameter named “include”
          schema:
            type: string
            example: devices
        - name: page
          in: query
          description: >-
              Default pagination size is 30 but you can manage it from querystring parameter named “page”.
          schema:
            type: object
            properties:
              number:
                description: Control page number
                type: integer
                format: int32
                example: 2
              size:
                description: Control page size
                type: integer
                format: int32
                example: 3
    post:
      tags:
        - Platforms
      summary: Creates a new Platform
      operationId: addNewPlatform
      parameters:
        - name: include
          in: query
          description: >-
            You can include related object(s) details to request with the querystring parameter named “include”. this should change the request boby please visit the dics in GitLab to learn more.
          schema:
            type: string
            example: devices
      requestBody:
        description: 'The needed json data to create a platform. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestPlatform'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponsePlatform'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
           $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
  '/platforms/{platformID}':
    get:
      tags:
        - Platforms
      summary: Retrieve details of a platform.
      description: "you can also use the endpoint
          '/devices/<int:id>/platform' "
      operationId: getAPlatform
      parameters:
        - name: platformID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
           application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponsePlatform'
        '404':
          description: Platform not found
          content: {}
        '500':
           $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
    patch:
      tags:
        - Platforms
      summary: Modifies an existing platform. The JSON has to include the platform ID.
      description: "you can also use the endpoint
          '/devices/<int:id>/platform' "
      operationId: modifyPlatform
      parameters:
        - name: platformID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          The needed JSON data to create a Platform.
        content:
           application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestPlatform'
        required: true
      responses:
        '200':
          description: OK
          content:
           application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponsePlatform'
        '404':
          description: Platform not found
          content: {}
        '500':
           $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
    delete:
      tags:
        - Platforms
      summary: 'Deletes the Platform with ID {platformID}.'
      description: "you can also use the endpoint
          '/devices/<int:id>/platform' "
      operationId: deletePlatform
      parameters:
        - name: platformID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
             application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DeleteObject'
        '404':
          description: Platform not found
          content: {}
        '409':
          description: Platform still has references
          content: {}
        '500':
           $ref: '#/components/responses/InternalServerError'
  '/platforms/{platformID}/relationships/devices':
    get:
      tags:
        - Platforms
      summary: 'Retrieve relationships between a platform and devices'
      operationId: getRealationsofPlatform
      parameters:
        - name: platformID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
           $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Platforms
      summary: 'Create relationships between a platform and devices'
      operationId: addPlatformRelationToDevice
      parameters:
        - name: platformID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create a platform. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
           $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Platforms
      summary: 'Update relationships between a platform and devices'
      operationId: alterRealationsofPlatform
      parameters:
        - name: platformID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create a platform. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
           $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Platforms
      summary: 'Delete relationships between  a platform and devices'
      operationId: removePlatformRelationToDevice
      parameters:
        - name: platformID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create a platform. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DeleteObject'
        '500':
           $ref: '#/components/responses/InternalServerError'
  /devices:
    get:
      tags:
        - Devices
      summary: >-
        Returns all available items. The level of detail and the returned amount
        of items can be configured by qunery parameters.
      description: >-
        you can also use the endpoint '/platforms/<int:id>/devices'
      operationId: getAllItems
      parameters:
        - name: filter
          in: query
          description: >-
            Retrieve devices after a specific attribute.
          schema:
            type: object
            properties:
              name:
                type: string
                description: the name of the field you want to filter on
                example: devices
              op:
                type: string
                description: the operation you want to use (all sqlalchemy operations are available)
                externalDocs:
                  description: sqlalchemy operations
                  url: 'https://flask-rest-jsonapi.readthedocs.io/en/latest/filtering.html'
                example: any
              val:
                type: string
                description: the key for fitering
                example: urn
        - name: include
          in: query
          description: >-
            You can include related object(s) details to responses with the querystring parameter named “include”
          schema:
            type: string
            example: events
        - name: page
          in: query
          description: >-
              Default pagination size is 30 but you can manage it from querystring parameter named “page”.
          schema:
            type: object
            properties:
              number:
                description: Control page number
                type: integer
                format: int32
                example: 2
              size:
                description: Control page size
                type: integer
                format: int32
                example: 3
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseDevices'
        '500':
           $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Devices
      summary: Create a device from JSON input
      description: >-
        you can also use the endpoint '/platforms/<int:id>/devices'
      operationId: CreateDevice
      parameters:
        - name: include
          in: query
          description: >-
            You can include related object(s) details to request with the querystring parameter named “include”. this should change the request boby please visit the dics in GitLab to learn more.
          schema:
            type: string
            example: events
      requestBody:
        description: 'The needed json data to create a Device. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestDevice'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseDevice'
        '400':
          description: Invalid JSON.
          content: {}
        '409':
          description: Device with same ShortName under one parent
          content: {}
        '422':
          description: Validation constraint violation .
          content: {}
        '500':
           $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
  '/devices/{deviceID}':
    patch:
      tags:
        - Devices
      summary: Update a device from JSON input
      description: >-
        you can also use the endpoint '/events/<int:id>/device' or
        '/contact/<int:id>/device' or '/properties/<int:id>/device' or
        '/attachments/<int:id>/device' or '/Fields/<int:id>/device'
      operationId: alterDevice
      parameters:
        - name: deviceID
          in: path
          description: >-
            The ID of the item you want to update. The itemID in the JSON
            document will be ignored.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          The needed json data to update a Device.
        content:
           application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestDevice'
        required: true
      responses:
        '200':
          description: OK
          content:
           application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseDevice'
        '400':
          description: Invalid JSON.
          content: {}
        '404':
          description: Item could not be found.
          content: {}
        '500':
           $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
    get:
      tags:
        - Devices
      summary: Get a Device by ID
      description: >-
        you can also use the endpoint '/events/<int:id>/device' or
        '/contact/<int:id>/device' or '/properties/<int:id>/device' or
        '/attachments/<int:id>/device' or '/Fields/<int:id>/device'
      operationId: getDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseDevice'
        '404':
          description: Device not found .
          content: {}
        '500':
           $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Devices
      summary: 'remove a device.'
      operationId: removeDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
             application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DeleteObject'
        '500':
           $ref: '#/components/responses/InternalServerError'
  '/devices/{deviceID}/relationships/events':
    get:
      tags:
        - Devices
      summary: 'Retrieve relationships between a devices and an event'
      operationId: getRealationsofDeviceToEvent
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
           $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Devices
      summary: 'Create relationships between a person and devices'
      operationId: CreateEventToDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
           $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Devices
      summary: 'Update relationships between a platform and devices'
      operationId: alterEventofDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Devices
      summary: 'Delete relationships between two objects'
      operationId: removeEventfromDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/devices/{deviceID}/relationships/contacts':
    get:
      tags:
        - Devices
      summary: 'Retrieve relationships between a devices and an event'
      operationId: getRealationsofDeviceToContact
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
           $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Devices
      summary: 'Create relationships between a person and devices'
      operationId: CreateEventToContact
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
           $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Devices
      summary: 'Update relationships between a platform and devices'
      operationId: alterContacttofDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Devices
      summary: 'Delete relationships between two object'
      operationId: removeContactfromDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/devices/{deviceID}/relationships/attachments':
    get:
      tags:
        - Devices
      summary: 'Retrieve relationships between a devices and an event'
      operationId: getRealationsofDeviceToattachment
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
           $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Devices
      summary: 'Create relationships between a person and devices'
      operationId: CreateEventToattachment
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create a platform. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
           $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Devices
      summary: 'Update relationships between a platform and devices'
      operationId: alterattachmenttofDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create a platform. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Devices
      summary: 'Delete relationships between two object'
      operationId: removeatachmentfromDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create a platform. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/devices/{deviceID}/relationships/properties':
    get:
      tags:
        - Devices
      summary: 'Retrieve relationships between a devices and an event'
      operationId: getRealationsofDeviceToProperties
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Devices
      summary: 'Create relationships between a person and devices'
      operationId: CreatePropertiesToDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Devices
      summary: 'Update relationships between a platform and devices'
      operationId: alterPropertiesofDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create an object. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Devices
      summary: 'Delete relationships between two object'
      operationId: removePropertiesfromDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to delete an object. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/devices/{deviceID}/relationships/Fields':
    get:
      tags:
        - Devices
      summary: 'Retrieve relationships between a devices and an event'
      operationId: getRealationsofDeviceToCF
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Devices
      summary: 'Create relationships between a person and devices'
      operationId: CreateCFToDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create an object. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Devices
      summary: 'Update relationships between a platform and devices'
      operationId: alterCFofDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create a platform. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Devices
      summary: 'Delete relationships between two objects'
      operationId: removeCFfromDevice
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The needed json data to create a platform. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/AddObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /events:
    get:
      tags:
        - Events
      summary: >-
        Returns all available items.
        description: >-
        you can also use the endpoint '/devices/<int:id>/contacts'
      operationId: getAllEvents
      parameters:
        - name: filter
          in: query
          description: >-
            Retrieve devices after a specific attribute.
          schema:
            type: object
            properties:
              name:
                type: string
                description: the name of the field you want to filter on
                example: devices
              op:
                type: string
                description: the operation you want to use (all sqlalchemy operations are available)
                externalDocs:
                  description: sqlalchemy operations
                  url: 'https://flask-rest-jsonapi.readthedocs.io/en/latest/filtering.html'
                example: any
              val:
                type: string
                description: the key for fitering
                example: urn
        - name: include
          in: query
          description: >-
            You can include related object(s) details to responses with the querystring parameter named “include”
          schema:
            type: string
            example: devices
        - name: page
          in: query
          description: >-
              Default pagination size is 30 but you can manage it from querystring parameter named “page”.
          schema:
            type: object
            properties:
              number:
                description: Control page number
                type: integer
                format: int32
                example: 2
              size:
                description: Control page size
                type: integer
                format: int32
                example: 3
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseDevices'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Events
      summary: Creates an Event from JSON input
      description: >-
        you can also use the endpoint '/devices/<int:id>/contacts'
      operationId: CreateEvent
      parameters:
        - name: include
          in: query
          description: >-
            You can include related object(s) details to request with the querystring parameter named “include”. this should change the request boby please visit the dics in GitLab to learn more.
          schema:
            type: string
            example: devices
      requestBody:
        description: 'The needed json data to create an Event. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestEvent'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseEvents'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
  '/event/{eventID}':
    patch:
      tags:
        - Events
      summary: Update an Event from JSON input
      operationId: alterEvent
      parameters:
        - name: eventID
          in: path
          description: >-
            The ID of the item you want to update. The itemID in the JSON
            document will be ignored.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          The needed json data to update a Device. ShortNames will be ignored.
          They must not be edited after creation, because they are an integral
          part of the item URN.
        content:
           application/vnd.api+json:
            schema:
               $ref: '#/components/schemas/RequestEvent'
        required: true
      responses:
        '200':
          description: OK
          content:
           application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseEvents'
      x-codegen-request-body-name: body
    get:
      tags:
        - Events
      summary: Get a Event by ID
      operationId: getEvent
      parameters:
        - name: eventID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseEvents'
        '404':
          description: Device not found .
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Events
      summary: 'remove an Event.'
      operationId: removeEvent
      parameters:
        - name: eventID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
             application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DeleteObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /properties:
    get:
      tags:
        - Properties
      summary: >-
        Returns all available items.
      description: >-
        you can also use the endpoint '/devices/<int:id>/contacts'
      operationId: getAllProperties
      parameters:
        - name: filter
          in: query
          description: >-
            Retrieve devices after a specific attribute.
          schema:
            type: object
            properties:
              name:
                type: string
                description: the name of the field you want to filter on
                example: devices
              op:
                type: string
                description: the operation you want to use (all sqlalchemy operations are available)
                externalDocs:
                  description: sqlalchemy operations
                  url: 'https://flask-rest-jsonapi.readthedocs.io/en/latest/filtering.html'
                example: any
              val:
                type: string
                description: the key for fitering
                example: urn
        - name: include
          in: query
          description: >-
            You can include related object(s) details to responses with the querystring parameter named “include”
          schema:
            type: string
            example: devices
        - name: page
          in: query
          description: >-
              Default pagination size is 30 but you can manage it from querystring parameter named “page”.
          schema:
            type: object
            properties:
              number:
                description: Control page number
                type: integer
                format: int32
                example: 2
              size:
                description: Control page size
                type: integer
                format: int32
                example: 3
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseProperties'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Properties
      summary: Creates properties from JSON input
      description: >-
        you can also use the endpoint '/devices/<int:id>/contacts'
      operationId: CreatePproperties
      parameters:
        - name: include
          in: query
          description: >-
            You can include related object(s) details to request with the querystring parameter named “include”. this should change the request boby please visit the dics in GitLab to learn more.
          schema:
            type: string
            example: devices
      requestBody:
        description: 'The needed json data to create a Device. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestProperties'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseProperties'
        '400':
          description: Invalid JSON.
          content: {}
        '404':
          description: Auth user or contact not found.
          content: {}
        '409':
          description: Device with same ShortName under one parent
          content: {}
        '422':
          description: Validation constraint violation .
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
  '/properties/{propertieID}':
    patch:
      tags:
        - Properties
      summary: Update properties from JSON input
      operationId: alterProperties
      parameters:
        - name: propertiesID
          in: path
          description: >-
            The ID of the item you want to update. The itemID in the JSON
            document will be ignored.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          The needed json data to update a Device. ShortNames will be ignored.
          They must not be edited after creation, because they are an integral
          part of the item URN.
        content:
           application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestProperties'
        required: true
      responses:
        '200':
          description: OK
          content:
           application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseProperties'
        '400':
          description: Invalid JSON.
          content: {}
        '404':
          description: Item could not be found.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
    get:
      tags:
        - Properties
      summary: Get properties by ID
      operationId: getProperties
      parameters:
        - name: propertieID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseProperties'
        '404':
          description: Device not found .
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Properties
      summary: 'remove properties.'
      operationId: removeProperties
      parameters:
        - name: propertieID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
             application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DeleteObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /fields:
    get:
      tags:
        - Fields
      summary: >-
        Returns all available items.
      description: >-
        you can also use the endpoint '/devices/<int:id>/contacts'
      operationId: getAllFields
      parameters:
        - name: filter
          in: query
          description: >-
            Retrieve devices after a specific attribute.
          schema:
            type: object
            properties:
              name:
                type: string
                description: the name of the field you want to filter on
                example: devices
              op:
                type: string
                description: the operation you want to use (all sqlalchemy operations are available)
                externalDocs:
                  description: sqlalchemy operations
                  url: 'https://flask-rest-jsonapi.readthedocs.io/en/latest/filtering.html'
                example: any
              val:
                type: string
                description: the key for fitering
                example: urn
        - name: include
          in: query
          description: >-
            You can include related object(s) details to responses with the querystring parameter named “include”
          schema:
            type: string
            example: devices
        - name: page
          in: query
          description: >-
              Default pagination size is 30 but you can manage it from querystring parameter named “page”.
          schema:
            type: object
            properties:
              number:
                description: Control page number
                type: integer
                format: int32
                example: 2
              size:
                description: Control page size
                type: integer
                format: int32
                example: 3
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/RequestField'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Fields
      summary: Creates a Field from JSON input
      operationId: CreateFields
      description: >-
        you can also use the endpoint '/devices/<int:id>/Fields'
      parameters:
        - name: include
          in: query
          description: >-
            You can include related object(s) details to request with the querystring parameter named “include”. this should change the request boby please visit the dics in GitLab to learn more.
          schema:
            type: string
            example: devices
      requestBody:
        description: 'The needed json data to create a custom field. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestField'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseField'
        '400':
          description: Invalid JSON.
          content: {}
        '404':
          description: Auth user or contact not found.
          content: {}
        '409':
          description: Device with same ShortName under one parent
          content: {}
        '422':
          description: Validation constraint violation .
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
  '/fields/{FieldID}':
    patch:
      tags:
        - Fields
      summary: Update Fields from JSON input
      operationId: alterFields
      parameters:
        - name: FieldID
          in: path
          description: >-
            The ID of the item you want to update. The itemID in the JSON
            document will be ignored.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          The needed json data to update a Device. ShortNames will be ignored.
          They must not be edited after creation, because they are an integral
          part of the item URN.
        content:
           application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestField'
        required: true
      responses:
        '200':
          description: OK
          content:
           application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseField'
        '400':
          description: Invalid JSON.
          content: {}
        '404':
          description: Item could not be found.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
    get:
      tags:
        - Fields
      summary: Get a Field by ID
      operationId: getFields
      parameters:
        - name: FieldsID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseField'
        '404':
          description: Device not found .
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Fields
      summary: 'remove a Field.'
      operationId: removeFields
      parameters:
        - name: FieldID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
             application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DeleteObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /contacts:
    get:
      tags:
        - Contacts
      summary: >-
        Returns all available items.
        description: >-
        you can also use the endpoint '/devices/<int:id>/contacts'
      operationId: getAllContacts
      parameters:
        - name: filter
          in: query
          description: >-
            Retrieve devices after a specific attribute.
          schema:
            type: object
            properties:
              name:
                type: string
                description: the name of the field you want to filter on
                example: devices
              op:
                type: string
                description: the operation you want to use (all sqlalchemy operations are available)
                externalDocs:
                  description: sqlalchemy operations
                  url: 'https://flask-rest-jsonapi.readthedocs.io/en/latest/filtering.html'
                example: any
              val:
                type: string
                description: the key for fitering
                example: urn
        - name: include
          in: query
          description: >-
            You can include related object(s) details to responses with the querystring parameter named “include”
          schema:
            type: string
            example: devices
        - name: page
          in: query
          description: >-
              Default pagination size is 30 but you can manage it from querystring parameter named “page”.
          schema:
            type: object
            properties:
              number:
                description: Control page number
                type: integer
                format: int32
                example: 2
              size:
                description: Control page size
                type: integer
                format: int32
                example: 3
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseContact'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Contacts
      summary: Creates a contact from JSON input
      description: >-
        you can also use the endpoint '/devices/<int:id>/contacts'
      operationId: CreateContacts
      parameters:
        - name: include
          in: query
          description: >-
            You can include related object(s) details to request with the querystring parameter named “include”. this should change the request boby please visit the dics in GitLab to learn more.
          schema:
            type: string
            example: devices
      requestBody:
        description: 'The needed json data to create a contact. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestContact'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseContact'
        '400':
          description: Invalid JSON.
          content: {}
        '404':
          description: Auth user or contact not found.
          content: {}
        '409':
          description: Device with same ShortName under one parent
          content: {}
        '422':
          description: Validation constraint violation .
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
  '/contacts/{contactID}':
    patch:
      tags:
        - Contacts
      summary: Update contacts from JSON input
      operationId: alterContacts
      parameters:
        - name: contactID
          in: path
          description: >-
            The ID of the item you want to update. The itemID in the JSON
            document will be ignored.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          The needed json data to update a Device. ShortNames will be ignored.
          They must not be edited after creation, because they are an integral
          part of the item URN.
        content:
           application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestContact'
        required: true
      responses:
        '200':
          description: OK
          content:
           application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseContact'
        '400':
          description: Invalid JSON.
          content: {}
        '404':
          description: Item could not be found.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
    get:
      tags:
        - Contacts
      summary: Get a contact by ID
      operationId: getContacts
      parameters:
        - name: contactsID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseContact'
        '404':
          description: Device not found .
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Contacts
      summary: 'remove contact.'
      operationId: removeContacts
      parameters:
        - name: contactID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
             application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DeleteObject'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /attachments:
    get:
      tags:
        - Attachments
      summary: >-
        Returns all available items.
      operationId: getAllAttachments
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseAttachment'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Attachments
      summary: Creates  attachments from JSON input
      operationId: CreateAttachments
      parameters:
        - name: include
          in: query
          description: >-
            You can include related object(s) details to request with the querystring parameter named “include”. this should change the request boby please visit the dics in GitLab to learn more.
          schema:
            type: string
            example: devices
      requestBody:
        description: 'The needed json data to create an attachments. '
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestAttachment'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseAttachment'
        '400':
          description: Invalid JSON.
          content: {}
        '404':
          description: Auth user or contact not found.
          content: {}
        '409':
          description: Device with same ShortName under one parent
          content: {}
        '422':
          description: Validation constraint violation .
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
  '/attachments/{attachmentID}':
    patch:
      tags:
        - Attachments
      summary: Update attachments from JSON input
      operationId: alterAttachments
      parameters:
        - name: attachmentID
          in: path
          description: >-
            The ID of the item you want to update. The itemID in the JSON
            document will be ignored.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          The needed json data to update a Device. ShortNames will be ignored.
          They must not be edited after creation, because they are an integral
          part of the item URN.
        content:
           application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequestAttachment'
        required: true
      responses:
        '200':
          description: OK
          content:
           application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseAttachment'
        '400':
          description: Invalid JSON.
          content: {}
        '404':
          description: Item could not be found.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codegen-request-body-name: body
    get:
      tags:
        - Attachments
      summary: Get an attachment by ID
      operationId: getAttachments
      parameters:
        - name: attachmentsID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ResponseAttachment'
        '404':
          description: Device not found .
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Attachments
      summary: 'remove attachments.'
      operationId: removeAttachments
      parameters:
        - name: attachmentID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
             application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DeleteObject'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
         application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal Server Error
      content:
         application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request
      content:
         application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
          description: Access token is missing or invalid

  schemas:
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
              source:
                type: object
                properties:
                  parameter:
                    type: string
              title:
                type: string
              detail:
                type: string
        jsonapi:
          type: object
          properties:
            version:
              type: string
              example: "1.0"
    Device:
      required:
        - persistentIdentifier
        - inventoryNumber
        - model
        - manufacturer
        - type
        - serialNumber
        - ResponsiblePersons
        - dualUse
      type: object
      x-tablename: device
      properties:
        description:
          type: string
        shortName:
          type: string
        longName:
          type: string
        serialNumber:
          type: string
        manufacture:
          type: string
        dualUse:
          type: boolean
          default: false
        model:
          type: string
        inventoryNumber:
          type: string
        persistentIdentifier:
          type: integer
          format: int32
        src:
          type: string
          description: link to website
        label:
          type: string
        type:
          type: string
        urn:
          type: string
          description: >-
            '[manufacture_[model]_[type]_[serial_number]'
        configurationDate:
          type: string
          format: date_time
        status:
          type: string
    RequestDevice:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: device
            id:
              type: integer
              format: int32
              example: use only with endpoints, that requird an id.
            attributes:
                  $ref: '#/components/schemas/Device'
    ResponseDevice:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: device
            attributes:
                  $ref: '#/components/schemas/Device'
        relationships:
          type: object
          properties:
            platform:
              type: object
              properties:
                links:
                  type: object
                  properties:
                    related:
                      type: string
                      example: "/device/{deviceID}/platform"
                    self:
                      type: string
                      example: "/device/{deviceID}/relationships/platform"
        links:
          type: object
          properties:
            self:
              type: string
              example: "/device/1"
        jsonapi:
          type: object
          properties:
            version:
              type: string
              example: "1.0"
    ResponseDevices:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: device
              attributes:
                    $ref: '#/components/schemas/Device'
              relationships:
                type: object
                properties:
                  platform:
                    type: object
                    properties:
                      links:
                        type: object
                        properties:
                          related:
                            type: string
                            example: "/device/{deviceID}/platform"
                          self:
                            type: string
                            example: "/device/{deviceID}/relationships/platform"
        meta:
          type: object
          properties:
            count:
              type: integer
              format: int32
              example: 1
        links:
          type: object
          properties:
            self:
              type: string
              example: "/device/1"
        jsonapi:
          type: object
          properties:
            version:
              type: string
              example: "1.0"
    RequestPlatform:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: platform
            id:
              type: integer
              format: int32
              example: use only with endpoints, that requird an id.
            attributes:
                  $ref: '#/components/schemas/Platform'
    ResponsePlatform:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: platform
            id:
              type: integer
              format: int32
            attributes:
                  $ref: '#/components/schemas/Platform'
        relationships:
          type: object
          properties:
            devices:
              type: object
              properties:
                links:
                  type: object
                  properties:
                    related:
                      type: string
                      example: "/platforms/{deviceID}/relationships/devices"
                    self:
                      type: string
                      example: "/platforms/{platformID}"
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      example: device
                    id:
                      type: integer
                      format: int32
                      example: 1

        links:
          type: object
          properties:
            self:
              type: string
              example: "/platform/1"
        jsonapi:
          type: object
          properties:
            version:
              type: string
              example: "1.0"
    ResponsePlatforms:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: platform
              attributes:
                    $ref: '#/components/schemas/Platform'
              rel:
                $ref: '#/components/schemas/Relationships'

        meta:
          type: object
          properties:
            count:
              type: integer
              format: int32
              example: 1
        links:
          $ref: '#/components/schemas/PlatformLinks'
        jsonapi:
          $ref: '#/components/schemas/Jsonapi'
    Relationships:
      type: object
      properties:
        platform:
          type: object
          properties:
            links:
              type: object
              properties:
                related:
                  type: string
                  example: "/platform/{deviceID}/platform"
                self:
                  type: string
                  example: "/platform/{deviceID}/relationships/platform"
    Jsonapi:
          type: object
          properties:
            version:
              type: string
              example: "1.0"
    PlatformLinks:
          type: object
          properties:
            self:
              type: string
              example: "/platform/1"
    Event:
      required:
        - date
        - description
      type: object
      properties:
        date:
          type: string
          description: Please only use UTC format
          format: date-time
        label:
          type: string
          example: Test
        description:
          type: string
        deviceID:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
    RequestEvent:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: platform
            attributes:
                  $ref: '#/components/schemas/Event'
    ResponseEvents:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: device
              attributes:
                    $ref: '#/components/schemas/Platform'
              rel:
                $ref: '#/components/schemas/Relationships'
    Relationship:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              id:
                type: integer
                format: int32
    Platform:
      required:
        - longName
        - platformType
        - shortName
      type: object
      properties:
        description:
          type: string
        shortName:
          type: string
        longName:
          type: string
        manufacturer:
          type: string
        type:
          type: string
        inventoryNumber:
          type: string
        platformType:
          type: string
        src:
          type: string
          description: link to website
        urn:
          type: string
          description: >-
            '[platformtype]_[short name]'
        configurationDate:
          type: string
          format: date_time
    Field:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    RequestField:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: platform
            attributes:
                  $ref: '#/components/schemas/Field'
    ResponseField:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: device
              attributes:
                    $ref: '#/components/schemas/Field'
              rel:
                $ref: '#/components/schemas/Relationships'
    Attachment:
      type: object
      properties:
        lable:
          type: string
        src:
          type: string
    RequestAttachment:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: platform
            attributes:
                  $ref: '#/components/schemas/Attachment'
    ResponseAttachment:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: device
              attributes:
                    $ref: '#/components/schemas/Attachment'
              rel:
                $ref: '#/components/schemas/Relationships'
    Contact:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
    RequestContact:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: platform
            attributes:
                  $ref: '#/components/schemas/Contact'
    ResponseContact:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: device
              attributes:
                    $ref: '#/components/schemas/Contact'
              rel:
                $ref: '#/components/schemas/Relationships'
    Properties:
      type: object
      properties:
        measuring range:
          properties:
            min:
              type: integer
              format: int32
            max:
              type: integer
              format: int32
        accuracy:
          type: string
        label:
          type: string
        failureValue:
          type: integer
          format: int32
        unit:
          type: string
          enum:
            - placeholder
            - placeholder
        Compartment:
          type: string
          enum:
            - placeholder
            - placeholder
        SamplingMedia:
          type: string
          enum:
            - placeholder
            - placeholder
        Variable:
          type: string
          enum:
            - placeholder
            - placeholder
    RequestProperties:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              example: platform
            attributes:
                  $ref: '#/components/schemas/Properties'
    ResponseProperties:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: device
              attributes:
                    $ref: '#/components/schemas/Properties'
              rel:
                $ref: '#/components/schemas/Relationships'
    AddObject:
      type: object
      properties:
        meta:
          type: object
          properties:
            message:
              type: string
              example: "Object successfully created"
        jsonapi:
          type: object
          properties:
            version:
              type: string
              example: "1.0"
    DeleteObject:
      type: object
      properties:
        meta:
          type: object
          properties:
            message:
              type: string
              example: "Object successfully deleted"
        jsonapi:
          type: object
          properties:
            version:
              type: string
              example: "1.0"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenIdConnect:
      type: openIdConnect
      openIdConnectUrl: '###'
  links: {}
  callbacks: {}
security:
  - bearerAuth: []
  - OpenIdConnect: []