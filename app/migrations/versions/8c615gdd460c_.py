"""Add migration to contact role table

Revision ID: 7b504fcc359b
Revises: 0139893c4e15
Create Date: 2022-03-15 12:02:28.389582

"""
from alembic import op

# revision identifiers, used by Alembic.
from project.api.models.base_model import db
from sqlalchemy import MetaData, Table

revision = "8c615gdd460c"
down_revision = "7b504fcc359b"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    add_device_contact_role()
    add_platform_contact_role()
    add_configuration_contact_role()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def add_device_contact_role():
    device_contacts = db.session.query(db.metadata.tables["device_contacts"]).all()
    data_list = []
    for device_contact in device_contacts:
        data = {
            "device_id": device_contact[0],
            "contact_id": device_contact[1],
            "role_name": "operator",
            # TODO: add uri
            "role_uri": "",
        }
        data_list.append(data)
    meta = MetaData(bind=op.get_bind())
    meta.reflect(only=("device_contact_role",))
    device_contact_role = Table("device_contact_role", meta)
    op.bulk_insert(device_contact_role, data_list)


def add_platform_contact_role():
    platform_contacts = db.session.query(db.metadata.tables["platform_contacts"]).all()
    data_list = []
    for platform_contact in platform_contacts:
        data = {
            "platform_id": platform_contact[0],
            "contact_id": platform_contact[1],
            "role_name": "operator",
            # TODO: add uri
            "role_uri": "",
        }
        data_list.append(data)
    meta = MetaData(bind=op.get_bind())
    meta.reflect(only=("platform_contact_role",))
    platform_contact_role = Table("platform_contact_role", meta)
    op.bulk_insert(platform_contact_role, data_list)


def add_configuration_contact_role():
    configuration_contacts = db.session.query(
        db.metadata.tables["configuration_contacts"]
    ).all()
    data_list = []
    for configuration_contact in configuration_contacts:
        data = {
            "configuration_id": configuration_contact[0],
            "contact_id": configuration_contact[1],
            "role_name": "operator",
            # TODO: add uri
            "role_uri": "",
        }
        data_list.append(data)
    meta = MetaData(bind=op.get_bind())
    meta.reflect(only=("configuration_contact_role",))
    configuration_contact_role = Table("configuration_contact_role", meta)
    op.bulk_insert(configuration_contact_role, data_list)
