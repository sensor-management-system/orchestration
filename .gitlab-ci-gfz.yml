stages:
  - dummy
  - check
  - test
  - build
  - deploy-staging
  - after-deployment-tests

cache:
  paths:
    - dist

dummmy:
  stage: dummy
  script:
    - |
     if [ 100 -g 10 ]; then
          echo a b \
            c d
          echo mitte
          echo ende
        fi

check-lint:
  stage: check
  image: node:10.16.3-stretch
  before_script:
    - node -v
    - npm install
  script:
    - npm run lint
  tags:
    - ssm
    - id2
    - docker
  allow_failure: true
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules

test-frontend-unit-tests:
  stage: test
  image: node:10.16.3-stretch
  before_script:
    - node -v
    - npm install
  script:
    - npm test
  tags:
    - ssm
    - id2
    - docker
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules

.docker_login_gitlab_registry: &docker_login_gitlab_registry
  - echo "$CI_BUILD_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

build-deploy-image:
  stage: build
  image: docker:19.03.1
  variables:
    SMS_BACKEND_URL: ${STAGING_BACKEND_URL}/rdm/svm-api/v1
    CV_BACKEND_URL: ${STAGING_CV_BACKEND_URL}/api
    HOST: ${STAGING_HOST}
    CLIENT_ID: ${STAGING_CLIENT_ID}
    AUTHORITY: ${STAGING_IDP_AUTORITY}
  before_script:
    - *docker_login_gitlab_registry
    - echo $SMS_BACKEND_URL
    - echo $CV_BACKEND_URL
  script:
    - >
      if [ -z "$CI_COMMIT_TAG" ]; then
        docker build --pull -t "$CI_REGISTRY_IMAGE:latest" --tag "$CI_REGISTRY_IMAGE:latest" -f docker/deployment/gfz/Dockerfile
            --build-arg SMS_BACKEND_URL_ARG=$SMS_BACKEND_URL
            --build-arg CV_BACKEND_URL_ARG=$CV_BACKEND_URL
            --build-arg HOST_ARG=$HOST
            --build-arg CLIENT_ID_ARG=$CLIENT_ID
            --build-arg AUTHORITY_ARG=$AUTHORITY
            .

        docker push "$CI_REGISTRY_IMAGE:latest"
      else
        docker build --pull -t "$CI_REGISTRY_IMAGE:latest" --tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" --tag "$CI_REGISTRY_IMAGE:latest" -f docker/deployment/gfz/Dockerfile
            --build-arg SMS_BACKEND_URL_ARG=$SMS_BACKEND_URL
            --build-arg CV_BACKEND_URL_ARG=$CV_BACKEND_URL
            --build-arg HOST_ARG=$HOST
            --build-arg CLIENT_ID_ARG=$CLIENT_ID
            --build-arg AUTHORITY_ARG=$AUTHORITY
            .

        docker push "$CI_REGISTRY_IMAGE:latest"

        docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
      fi
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules
  tags:
    - deploy
    - staging
    - id2
  only:
    refs:
      - master
      - tags

build-deploy-image-manual:
  stage: build
  image: docker:19.03.1
  variables:
    SMS_BACKEND_URL: ${STAGING_BACKEND_URL}/rdm/svm-api/v1
    CV_BACKEND_URL: ${STAGING_CV_BACKEND_URL}/api
    HOST: ${STAGING_HOST}:8080
    # Not sure, if we need another client id for the staging on 8080
    CLIENT_ID: ${STAGING_CLIENT_ID}
    AUTHORITY: ${STAGING_IDP_AUTORITY}
  before_script:
    - *docker_login_gitlab_registry
    - echo $SMS_BACKEND_URL
    - echo $CV_BACKEND_URL
  script:
    - |
        if [ 100 -gt 10 ]; then
          docker build --tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" -f docker/deployment/gfz/Dockerfile \
            --build-arg SMS_BACKEND_URL_ARG=$SMS_BACKEND_URL \
            --build-arg CV_BACKEND_URL_ARG=$CV_BACKEND_URL \
            --build-arg HOST_ARG=$HOST \
            --build-arg CLIENT_ID_ARG=$CLIENT_ID \
            --build-arg AUTHORITY_ARG=$AUTHORITY \
            .
          docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
        fi
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules
  tags:
    - deploy
    - staging
    - id2
  when: manual

deploy-staging:
  stage: deploy-staging
  environment:
    name: gfzstaging
    url: http://$STAGING_HOST
  tags:
    - deploy
    - staging
    - id2
  variables:
    COMPOSE_PROJECT_NAME: ssmfrontend
  before_script:
    - *docker_login_gitlab_registry
  script:
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml pull
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml up -d
  only:
    refs:
      - master

deploy-staging-manual-8080:
  stage: deploy-staging
  environment:
    name: gfzstaging8080
    url: http://${STAGING_HOST}:8080
  tags:
    - deploy
    - staging
    - id2
  variables:
    COMPOSE_PROJECT_NAME: ssmfrontend
  before_script:
    - *docker_login_gitlab_registry
  script:
    - docker-compose -f docker/deployment/gfz/staging8080/docker-compose.yml pull
    - docker-compose -f docker/deployment/gfz/staging8080/docker-compose.yml up -d
  dependencies:
    - build-deploy-image-manual
  when: manual

test-availability-staging:
  stage: after-deployment-tests
  image: python:3
  environment:
    name: gfzstaging
    url: http://$STAGING_HOST
  tags:
    - deploy
    - staging
    - id2
  script:
    - curl http://$STAGING_HOST
  dependencies:
    - deploy-staging
  only:
    refs:
      - master

test-availability-staging8080:
  stage: after-deployment-tests
  image: python:3
  environment:
    name: gfzstaging8080
    url: http://${STAGING_HOST}:8080
  tags:
    - deploy
    - staging
    - id2
  script:
    - curl http://${STAGING_HOST}:8080
  dependencies:
    - deploy-staging-manual-8080
  when: manual

