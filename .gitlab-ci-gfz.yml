stages:
  - ci-services
  - build-gfz-image
  - deploy-gfz-image
  - after-deployment-gfz-create-database
  - after-deployment-gfz-create-tables
  - after-deployment-gfz-init-tables
  - after-deployment-test-gfz

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest


.docker_login_gitlab_registry: &docker_login_gitlab_registry
  - echo "$CI_BUILD_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

ci-services:
  stage: ci-services
  image:
    name: "gitext.gfz-potsdam.de:5000/software/services/fair/ci-services/ci-services:latest-dev"
    entrypoint: [""]
  script:
    - cp -r "$CI_PROJECT_DIR" /repo
    - rm -rf /repo/meta
    - docker-entrypoint.sh --version
    - docker-entrypoint.sh --list-authors
    - docker-entrypoint.sh --list-used-languages
    - docker-entrypoint.sh --list-used-licenses
    - docker-entrypoint.sh --reuse-lint
    - docker-entrypoint.sh --generate-report
    - cp -rT /repo "$CI_PROJECT_DIR"
  artifacts:
    paths:
      - meta/ci-services-report.md
    expire_in: 30 days
  tags:
    - docker
    - id2

build-gfz-image:
  stage: build-gfz-image
  image: docker:19.03.1
  environment:
    name: gfzstaging
    url: https://$STAGING_HOST
  before_script:
    - *docker_login_gitlab_registry
  script:
    - >
      if [ -z "$CI_COMMIT_TAG" ]; then
        docker build --tag "$CI_REGISTRY_IMAGE:latest" -f Dockerfile .
        docker push "$CI_REGISTRY_IMAGE:latest"
      else
        docker build --tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" --tag "$CI_REGISTRY_IMAGE:latest" -f Dockerfile .
        docker push "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
      fi
  tags:
    - deploy
    - staging
    - id2
  when: manual
  allow_failure: true

deploy-gfz-image:
  stage: deploy-gfz-image
  environment:
    name: gfzstaging
    url: https://$STAGING_HOST
  tags:
    - deploy
    - staging
    - id2
  variables:
    COMPOSE_PROJECT_NAME: ssmbackend
  before_script:
    - *docker_login_gitlab_registry
  script:
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml pull
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml up -d
  when: manual
  dependencies:
    - build-gfz-image
  allow_failure: true


after-deploy-gfz-image-create-dbs:
  stage: after-deployment-gfz-create-database
  environment:
    name: gfzstaging
    url: https://$STAGING_HOST
  tags:
    - deploy
    - staging
    - id2
  variables:
    COMPOSE_PROJECT_NAME: ssmbackend
  script:
      - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T db psql -U postgres -c 'CREATE DATABASE db_prod' || echo "prod database already exists"
      - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T db psql -U postgres -c 'CREATE DATABASE db_dev' || echo "dev database already exists"
      - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T db psql -U postgres -c 'CREATE DATABASE db_test;' || echo "test database already exists"
  when: manual
  dependencies:
    - deploy-gfz-image
  allow_failure: true

after-deploy-gfz-image-recreate-tables:
  stage: after-deployment-gfz-create-tables
  environment:
    name: gfzstaging
    url: https://$STAGING_HOST
  tags:
    - deploy
    - staging
    - id2
  variables:
    COMPOSE_PROJECT_NAME: ssmbackend
  script:
      - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T ssmbackend python3 manage.py recreate_db
  when: manual
  dependencies:
    - after-deploy-gfz-image-create-dbs
  allow_failure: true

after-deploy-gfz-image-init-tables:
  stage: after-deployment-gfz-init-tables
  environment:
    name: gfzstaging
    url: https://$STAGING_HOST
  tags:
    - deploy
    - staging
    - id2
  variables:
    COMPOSE_PROJECT_NAME: ssmbackend
  script:
      - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T ssmbackend python3 manage.py db_init
  when: manual
  dependencies:
    - after-deploy-gfz-image-create-dbs
  allow_failure: true

test-availability:
  stage: after-deployment-test-gfz
  image: python:3
  environment:
    name: gfzstaging
    url: https://$STAGING_HOST
  tags:
    - deploy
    - staging
    - id2
  script:
    - curl -f http://$STAGING_HOST:5000/rdm/svm-api/v1/ping
  when: manual
  dependencies:
    - after-deploy-gfz-image-init-tables
  allow_failure: true
