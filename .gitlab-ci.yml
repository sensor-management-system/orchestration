stages:
  - build
  - release
  - deploy

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:test-$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  DATABASE_TEST_URL: postgresql://$POSTGRES_USER:@$POSTGRES_PASSWORD:5432/$POSTGRES_DB
  WELL_KNOWN_URL: https://webapp.ufz.de/idp/oidc/v1/.well-known/openid-configuration
  HTTP_ORIGINS: "https://registry.hzdr.de http://rdm-test.intranet.ufz.de:5002"
  OIDC_USERNAME_CLAIM: "sub"
  ALLOWED_MIME_TYPES: "application/x-abiword,application/x-freearc,application/vnd.amazon.ebook,image/bmp,application/x-bzip,application/x-bzip2,text/csv,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/epub+zip,application/gzip,image/gif,text/html,image/vnd.microsoft.icon,text/calendar,image/jpeg,application/json,application/ld+json,application/vnd.oasis.opendocument.presentation,application/vnd.oasis.opendocument.spreadsheet,application/vnd.oasis.opendocument.text,image/png,application/pdf,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation,application/vnd.rar,application/rtf,image/svg+xml,application/x-tar,image/tiff,image/tiff,text/plain,image/webp,application/xhtml+xml,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/xml,application/vnd.mozilla.xul+xml,application/zip,application/x-7z-compressed"

.docker_login: &docker_login
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.docker-in-docker:
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  before_script:
    - *docker_login
  tags:
    - docker

build-gfz-image:
  stage: build
  extends: .docker-in-docker
  environment:
    name: gfzstaging
    url: https://$GFZ_STAGING_HOST
  script:
    - >
      if [ -z "$CI_COMMIT_TAG" ]; then
        docker build --tag "$CI_REGISTRY_IMAGE:gfz-latest" -f Dockerfile .
        docker push "$CI_REGISTRY_IMAGE:gfz-latest"
      else
        docker build --tag "$CI_REGISTRY_IMAGE:gfz-$CI_COMMIT_TAG" --tag "$CI_REGISTRY_IMAGE:gfz-latest" -f Dockerfile .
        docker push "$CI_REGISTRY_IMAGE:gfz-latest"
        docker push "$CI_REGISTRY_IMAGE:gfz-$CI_COMMIT_TAG"
      fi
  tags:
    - docker
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
      when: manual
      allow_failure: true


trigger-deploy-on-orchestration-gfz-image-develop:
  stage: deploy
  variables:
    # We set it to false in order to build also the
    # nginx (with then includes the idl).
    UPSTREAM_DEPLOYMENT_ONLY: "false"
  trigger:
    project: hub-terra/sms/orchestration
    branch: right-management-prototype
    strategy: depend
  needs: ["build-gfz-image"]
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
