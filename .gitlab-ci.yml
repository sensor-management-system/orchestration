# Web client of the Sensor Management System software developed within
# the Helmholtz DataHub Initiative by GFZ and UFZ.
#
# Copyright (C) 2020-2021
# - Wilhelm Becker (GFZ, wilhelm.becker@gfz-potsdam.de)
# - Nils Brinckmann (GFZ, nils.brinckmann@gfz-potsdam.de)
# - Marc Hanisch (GFZ, marc.hanisch@gfz-potsdam.de)
# - Helmholtz Centre Potsdam - GFZ German Research Centre for
#   Geosciences (GFZ, https://www.gfz-potsdam.de)
#
# Parts of this program were developed within the context of the
# following publicly funded projects or measures:
# - Helmholtz Earth and Environment DataHub
#   (https://www.helmholtz.de/en/research/earth_and_environment/initiatives/#h51095)
#
# Licensed under the HEESIL, Version 1.0 or - as soon they will be
# approved by the "Community" - subsequent versions of the HEESIL
# (the "Licence").
#
# You may not use this work except in compliance with the Licence.
#
# You may obtain a copy of the Licence at:
# https://gitext.gfz-potsdam.de/software/heesil
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Licence is distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the Licence for the specific language governing
# permissions and limitations under the Licence.
stages:
  - check
  - test
  - build
  - release
  - deploy-staging
  - deploy-prod
  - after-deployment-tests

cache:
  paths:
    - dist

variables:
  UFZ_LATEST_IMAGE: $CI_REGISTRY_IMAGE:ufz-latest
  UFZ_RELEASE_TAG_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  ALLOWED_MIME_TYPES: "application/x-abiword,application/x-freearc,application/vnd.amazon.ebook,image/bmp,application/x-bzip,application/x-bzip2,text/csv,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/epub+zip,application/gzip,image/gif,text/html,image/vnd.microsoft.icon,text/calendar,image/jpeg,application/json,application/ld+json,application/vnd.oasis.opendocument.presentation,application/vnd.oasis.opendocument.spreadsheet,application/vnd.oasis.opendocument.text,image/png,application/pdf,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation,application/vnd.rar,application/rtf,image/svg+xml,application/x-tar,image/tiff,image/tiff,text/plain,image/webp,application/xhtml+xml,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/xml,application/vnd.mozilla.xul+xml,application/zip,application/x-7z-compressed"

check-lint:
  stage: check
  image: node:16.0.0-buster
  before_script:
    - node -v
    - npm ci
  script:
    - npm run lint
  tags:
    - docker
  allow_failure: true
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules

check-build:
  stage: check
  image: node:16.0.0-buster
  before_script:
    - node -v
    - npm ci
  script:
    - npm run build
  tags:
    - docker
  allow_failure: false
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules

check-license:
  stage: check
  image: node:16.0.0-buster
  before_script:
    - node -v
    - npm ci
  script:
    - npm run licenseCheck
  tags:
    - docker
  allow_failure: true
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules

test-frontend-unit-tests:
  stage: test
  image: node:16.0.0-buster
  before_script:
    - node -v
    - npm ci
  script:
    - npm test
  tags:
    - docker
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules

.docker_login_gitlab_registry: &docker_login_gitlab_registry
  - echo "$CI_BUILD_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

.docker_build:
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  before_script:
    - *docker_login_gitlab_registry
    - echo $SMS_BACKEND_URL
    - echo $CV_BACKEND_URL
  tags:
    - docker

build-deploy-static-files-gfz:
  stage: build
  extends: .docker_build
  variables:
    SMS_BACKEND_URL: ${GFZ_STAGING_DEVELOP_BACKEND_URL}
    CV_BACKEND_URL: ${GFZ_STAGING_DEVELOP_SMS_CV_URL}
    CLIENT_ID: ${GFZ_STAGING_HIFIS_DEV_CLIENT_ID}
    PID_BASE_URL: ""
    OIDC_REFRESH_TOKEN: "refresh_token"
    OIDC_REFRESH_EXPIRE: 28800
    OIDC_RESPONSE_TYPE: "code"
    OIDC_GRANT_TYPE: "authorization_code"
    OIDC_CHALLANGE: "S256"
    OIDC_SCHEME: "true"
    OIDC_WELL_KNOWN: "https://login-dev.helmholtz.de/oauth2/.well-known/openid-configuration"
    OIDC_SCOPES: "profile openid email eduperson_principal_name"
    OIDC_REFRESH_INTERVAL_TIME: 1800000
  before_script:
    - apk add --update curl jq && rm -rf /var/cache/apk/*
  script:
    - TARGET_PACKAGE_VERSION=$(if [ -z "${CI_JOB_MANUAL}" ]; then echo "latest"; else echo "manual"; fi)
    - echo "Build gfz statics ${TARGET_PACKAGE_VERSION}"
    - docker build --tag "$CI_REGISTRY_IMAGE-static:gfz-${TARGET_PACKAGE_VERSION}" -f docker/deployment/gfz/Dockerfile .
    - |
        docker run --name "static-gfz-${TARGET_PACKAGE_VERSION}-container-$CI_JOB_ID" \
          --env BASE_URL="/${TARGET_PACKAGE_VERSION}" \
          --env SMS_BACKEND_URL \
          --env CV_BACKEND_URL \
          --env INSTITUTE="gfz" \
          --env NUXT_ENV_PID_BASE_URL=$PID_BASE_URL \
          --env NUXT_ENV_CLIENT_ID=$CLIENT_ID \
          --env NUXT_ENV_OIDC_SCHEME=$OIDC_SCHEME \
          --env NUXT_ENV_OIDC_WELL_KNOWN=$OIDC_WELL_KNOWN \
          --env NUXT_ENV_OIDC_REFRESH_TOKEN=$OIDC_REFRESH_TOKEN \
          --env NUXT_ENV_OIDC_REFRESH_EXPIRE=$OIDC_REFRESH_EXPIRE \
          --env NUXT_ENV_OIDC_RESPONSE_TYPE=$OIDC_RESPONSE_TYPE \
          --env NUXT_ENV_OIDC_GRANT_TYPE=$OIDC_GRANT_TYPE \
          --env NUXT_ENV_OIDC_CHALLANGE=$OIDC_CHALLANGE \
          --env NUXT_ENV_OIDC_REFRESH_INTERVAL_TIME=$OIDC_REFRESH_INTERVAL_TIME \
          --env NUXT_ENV_ALLOWED_MIMETYPES=$ALLOWED_MIME_TYPES \
          --env NUXT_ENV_SCOPE="$OIDC_SCOPES" \
          ${CI_REGISTRY_IMAGE}-static:gfz-${TARGET_PACKAGE_VERSION}
    # Use cp to avoid user missmatch with docker volumes
    - docker cp "static-gfz-${TARGET_PACKAGE_VERSION}-container-$CI_JOB_ID":/smsfrontend/dist .
    # Sign the tar and tar the tar with the signing txt file to enable checksum test for orch repository
    - tar zcvf dist.tar.gz dist
    - sha256sum dist.tar.gz > dist-sha256sum.txt
    - cat dist-sha256sum.txt
    - tar -cvf signed-dist.tar dist.tar.gz dist-sha256sum.txt
    # Upload static package and save response package-data
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file signed-dist.tar "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gfz-statics/${TARGET_PACKAGE_VERSION}/signed-dist.tar?select=package_file"  -o package_data.json'
    # Filter the sha256sum and store it in a file
    - cat package_data.json | jq -r '.file_sha256' -j > signed-dist-sha256sum.txt
    # Add source-file-name to match sha256sum checksum file format
    - echo "  signed-dist.tar" >> signed-dist-sha256sum.txt
    # Compare checksum
    - sha256sum -c signed-dist-sha256sum.txt
  after_script:
    - docker rm "static-gfz-${TARGET_PACKAGE_VERSION}-container-$CI_JOB_ID"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # We want to be able to trigger the manual deployment from every branch
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual

trigger-build-on-orchestration-gfz:
  stage: deploy-staging
  needs: ["build-deploy-static-files-gfz"]
  trigger:
    project: hub-terra/sms/orchestration
    branch: main
    strategy: depend

build-deploy-image-ufz-staging:
  stage: build
  extends: .docker_build
  variables:
    SMS_BACKEND_URL: ${UFZ_STAGING_BACKEND_URL}
    CV_BACKEND_URL: ${UFZ_STAGING_SMS_CV_BACKEND_URL}
    # HOST: ${UFZ_STAGING_HOST}
    CLIENT_ID: ${UFZ_STAGING_PKCE_CLIENT_ID}
    PID_BASE_URL: ""
    OIDC_SCHEME: "true"
    OIDC_WELL_KNOWN: ${UFZ_STAGING_OIDC_WELL_KNOWN}
    OIDC_SCOPES: "profile openid email offline_access"
    OIDC_REFRESH_TOKEN: "refresh_token"
    OIDC_REFRESH_EXPIRE: 28800
    OIDC_RESPONSE_TYPE: "code"
    OIDC_GRANT_TYPE: "authorization_code"
    OIDC_CHALLANGE: "S256"
    OIDC_LOGIN_PARAMS: ${UFZ_STAGING_OIDC_LOGIN_PARAMS}
    OIDC_REFRESH_INTERVAL_TIME: ${UFZ_STAGING_OIDC_REFRESH_INTERVAL_TIME}
  script:
    - |
      docker build --tag "$UFZ_LATEST_IMAGE" -f docker/deployment/ufz/Dockerfile \
        --build-arg BASE_URL_ARG="/sms/" \
        --build-arg SMS_BACKEND_URL_ARG=$SMS_BACKEND_URL \
        --build-arg CV_BACKEND_URL_ARG=$CV_BACKEND_URL \
        --build-arg CLIENT_ID_ARG=$CLIENT_ID \
        --build-arg NUXT_ENV_PID_BASE_URL=$PID_BASE_URL \
        --build-arg NUXT_ENV_OIDC_WELL_KNOWN=$OIDC_WELL_KNOWN \
        --build-arg NUXT_ENV_OIDC_SCHEME=$OIDC_SCHEME \
        --build-arg NUXT_ENV_OIDC_REFRESH_TOKEN=$OIDC_REFRESH_TOKEN \
        --build-arg NUXT_ENV_OIDC_REFRESH_EXPIRE=$OIDC_REFRESH_EXPIRE \
        --build-arg NUXT_ENV_OIDC_RESPONSE_TYPE=$OIDC_RESPONSE_TYPE \
        --build-arg NUXT_ENV_OIDC_GRANT_TYPE=$OIDC_GRANT_TYPE \
        --build-arg NUXT_ENV_OIDC_CHALLANGE=$OIDC_CHALLANGE \
        --build-arg NUXT_ENV_OIDC_LOGIN_PARAMS="$OIDC_LOGIN_PARAMS" \
        --build-arg NUXT_ENV_OIDC_REFRESH_INTERVAL_TIME=$OIDC_REFRESH_INTERVAL_TIME \
        --build-arg ALLOWED_MIME_TYPES_ARG=$ALLOWED_MIME_TYPES \
        --build-arg BUILD_DATE=$(date --utc +%FT%TZ) \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        .
    - docker push "$UFZ_LATEST_IMAGE"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


build-deploy-image-ufz-prod:
  stage: build
  extends: .docker_build
  variables:
    SMS_BACKEND_URL: ${UFZ_PROD_BACKEND_URL}
    CV_BACKEND_URL: ${UFZ_PROD_SMS_CV_BACKEND_URL}
    CLIENT_ID: ${UFZ_STAGING_PKCE_CLIENT_ID}
    PID_BASE_URL: ""
    OIDC_SCHEME: "true"
    OIDC_WELL_KNOWN: ${UFZ_STAGING_OIDC_WELL_KNOWN}
    OIDC_SCOPES: "profile openid email offline_access"
    OIDC_REFRESH_TOKEN: "refresh_token"
    OIDC_REFRESH_EXPIRE: 28800
    OIDC_RESPONSE_TYPE: "code"
    OIDC_GRANT_TYPE: "authorization_code"
    OIDC_CHALLANGE: "S256"
    OIDC_LOGIN_PARAMS: ${UFZ_STAGING_OIDC_LOGIN_PARAMS}
    OIDC_REFRESH_INTERVAL_TIME: ${UFZ_STAGING_OIDC_REFRESH_INTERVAL_TIME}
  script:
    - |
      docker build --tag "$UFZ_LATEST_IMAGE" -f docker/deployment/ufz/Dockerfile \
        --build-arg BASE_URL_ARG="/sms/" \
        --build-arg SMS_BACKEND_URL_ARG=$SMS_BACKEND_URL \
        --build-arg CV_BACKEND_URL_ARG=$CV_BACKEND_URL \
        --build-arg CLIENT_ID_ARG=$CLIENT_ID \
        --build-arg NUXT_ENV_PID_BASE_URL=$PID_BASE_URL \
        --build-arg NUXT_ENV_OIDC_WELL_KNOWN=$OIDC_WELL_KNOWN \
        --build-arg NUXT_ENV_OIDC_SCHEME=$OIDC_SCHEME \
        --build-arg NUXT_ENV_OIDC_REFRESH_TOKEN=$OIDC_REFRESH_TOKEN \
        --build-arg NUXT_ENV_OIDC_REFRESH_EXPIRE=$OIDC_REFRESH_EXPIRE \
        --build-arg NUXT_ENV_OIDC_RESPONSE_TYPE=$OIDC_RESPONSE_TYPE \
        --build-arg NUXT_ENV_OIDC_GRANT_TYPE=$OIDC_GRANT_TYPE \
        --build-arg NUXT_ENV_OIDC_CHALLANGE=$OIDC_CHALLANGE \
        --build-arg NUXT_ENV_OIDC_LOGIN_PARAMS="$OIDC_LOGIN_PARAMS" \
        --build-arg NUXT_ENV_OIDC_REFRESH_INTERVAL_TIME=$OIDC_REFRESH_INTERVAL_TIME \
        --build-arg ALLOWED_MIME_TYPES_ARG=$ALLOWED_MIME_TYPES \
        --build-arg BUILD_DATE=$(date --utc +%FT%TZ) \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        .
    - docker push "$UFZ_LATEST_IMAGE"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

release-ufz-tag-image-stage:
  stage: release
  extends: .docker_build
  script:
    - docker pull $UFZ_LATEST_IMAGE
    - docker tag $UFZ_LATEST_IMAGE $UFZ_RELEASE_TAG_IMAGE
    - docker push $UFZ_RELEASE_TAG_IMAGE
  needs: ["build-deploy-image-ufz-staging"]
  rules:
#    - if: '$CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG =~ /^ufz-stage.*/'
    - if: '$CI_COMMIT_TAG =~ /^ufz-stage.*/'

release-ufz-tag-image-prod:
  stage: release
  extends: .docker_build
  script:
    - docker pull $UFZ_LATEST_IMAGE
    - docker tag $UFZ_LATEST_IMAGE $UFZ_RELEASE_TAG_IMAGE
    - docker push $UFZ_RELEASE_TAG_IMAGE
  needs: ["build-deploy-image-ufz-prod"]
  rules:
#    - if: '$CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG =~ /^ufz-prod.*/'
    - if: '$CI_COMMIT_TAG =~ /^ufz-prod.*/'

# Auskommentiert wegen Beschwerden im MM-Ḱanal
#
#trigger-deploy-on-orchestration-ufz-stage:
#  stage: "deploy-staging"
#  variables:
#    UPSTREAM_DEPLOYMENT_TARGET: "ufz"
#    DEPLOYMENT_TARGET_ENVIRONMENT: "stage"
#    SMS_COMPONENT_NAME: "frontend"
#    SMS_COMPONENT_TAG: "$CI_COMMIT_REF_SLUG"
#  trigger:
#    project: "hub-terra/sms/orchestration"
#    branch: "main"
#  needs: ["release-ufz-tag-image"]
#  rules:
#    - if: '$CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG =~ /^ufz-stage-.*/'
#
#trigger-deploy-on-orchestration-ufz-prod:
#  stage: "deploy-prod"
#  variables:
#    UPSTREAM_DEPLOYMENT_TARGET: "ufz"
#    DEPLOYMENT_TARGET_ENVIRONMENT: "prod"
#    SMS_COMPONENT_NAME: "frontend"
#    SMS_COMPONENT_TAG: "$CI_COMMIT_REF_SLUG"
#  trigger:
#    project: "hub-terra/sms/orchestration"
#    branch: "main"
#  needs: ["release-ufz-tag-image"]
#  rules:
#    - if: '$CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG =~ /^ufz-prod-.*/'
