# Web client of the Sensor Management System software developed within
# the Helmholtz DataHub Initiative by GFZ and UFZ.
#
# Copyright (C) 2020-2021
# - Kotyba Alhaj Taha (UFZ, kotyba.alhaj-taha@ufz.de)
# - Nils Brinckmann (GFZ, nils.brinckmann@gfz-potsdam.de)
# - Marc Hanisch (GFZ, marc.hanisch@gfz-potsdam.de)
# - Helmholtz Centre for Environmental Research GmbH - UFZ
#   (UFZ, https://www.ufz.de)
# - Helmholtz Centre Potsdam - GFZ German Research Centre for
#   Geosciences (GFZ, https://www.gfz-potsdam.de)
#
# Parts of this program were developed within the context of the
# following publicly funded projects or measures:
# - Helmholtz Earth and Environment DataHub
#   (https://www.helmholtz.de/en/research/earth_and_environment/initiatives/#h51095)
#
# Licensed under the HEESIL, Version 1.0 or - as soon they will be
# approved by the "Community" - subsequent versions of the HEESIL
# (the "Licence").
#
# You may not use this work except in compliance with the Licence.
#
# You may obtain a copy of the Licence at:
# https://gitext.gfz-potsdam.de/software/heesil
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Licence is distributed on an "AS IS" basis,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the Licence for the specific language governing
# permissions and limitations under the Licence.

stages:
  - build
  - backup
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  ALLOWED_MIME_TYPES: "application/x-abiword,application/x-freearc,application/vnd.amazon.ebook,image/bmp,application/x-bzip,application/x-bzip2,text/csv,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/epub+zip,application/gzip,image/gif,text/html,image/vnd.microsoft.icon,text/calendar,image/jpeg,application/json,application/ld+json,application/vnd.oasis.opendocument.presentation,application/vnd.oasis.opendocument.spreadsheet,application/vnd.oasis.opendocument.text,image/png,application/pdf,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation,application/vnd.rar,application/rtf,image/svg+xml,application/x-tar,image/tiff,image/tiff,text/plain,image/webp,application/xhtml+xml,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/xml,application/vnd.mozilla.xul+xml,application/zip,application/x-7z-compressed"

cache:
  paths:
    - frontend/dist

.docker_login_gitlab_registry: &docker_login_gitlab_registry
  - echo "$CI_BUILD_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

.docker_build:
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  before_script:
    - *docker_login_gitlab_registry
  tags:
    - docker

build-deploy-image-nginx-gfz-staging:
  stage: build
  extends: .docker_build
  variables:
    CLIENT_ID: ${GFZ_STAGING_OIDC_CLIENT_ID}
  script:
    - |
        docker build --tag "$CI_REGISTRY_IMAGE/nginx:gfz-latest" -f docker/build/nginx/gfz/staging/Dockerfile \
          --build-arg CLIENT_ID_ARG=$CLIENT_ID \
          --build-arg ALLOWED_MIME_TYPES_ARG=$ALLOWED_MIME_TYPES \
          .
    - docker push "$CI_REGISTRY_IMAGE/nginx:gfz-latest"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    

build-deploy-image-nginx-gfz-prod:
  stage: build
  extends: .docker_build
  variables:
    CLIENT_ID: ${GFZ_PROD_OIDC_CLIENT_ID}
  script:
    - |
        docker build --tag "$CI_REGISTRY_IMAGE/nginx:gfz-${CI_COMMIT_TAG:-prod-latest}" -f docker/build/nginx/gfz/prod/Dockerfile \
          --build-arg CLIENT_ID_ARG=$CLIENT_ID \
          --build-arg ALLOWED_MIME_TYPES_ARG=$ALLOWED_MIME_TYPES \
          .
    - docker push "$CI_REGISTRY_IMAGE/nginx:gfz-${CI_COMMIT_TAG:-prod-latest}"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TAG == null'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always

build-deploy-image-vocabulary-gfz-staging:
  stage: build
  extends: .docker_build
  script:
    - |
        docker build --tag "$CI_REGISTRY_IMAGE/vocabulary:gfz-latest" -f sms-cv/docker/gfz/deployment/Dockerfile \
          sms-cv
    - docker push "$CI_REGISTRY_IMAGE/vocabulary:gfz-latest"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    

build-deploy-image-vocabulary-gfz-prod:
  stage: build
  extends: .docker_build
  script:
    - |
        docker build --tag "$CI_REGISTRY_IMAGE/vocabulary:gfz-${CI_COMMIT_TAG:-prod-latest}" -f sms-cv/docker/gfz/deployment/Dockerfile \
          sms-cv
    - docker push "$CI_REGISTRY_IMAGE/vocabulary:gfz-${CI_COMMIT_TAG:-prod-latest}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TAG == null'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always

build-deploy-image-backend-gfz-staging:
  stage: build
  extends: .docker_build
  script:
    - |
        docker build --tag "$CI_REGISTRY_IMAGE/backend:gfz-latest" -f backend/Dockerfile \
          backend
    - docker push "$CI_REGISTRY_IMAGE/backend:gfz-latest"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    

build-deploy-image-backend-gfz-prod:
  stage: build
  extends: .docker_build
  script:
    - |
        docker build --tag "$CI_REGISTRY_IMAGE/backend:gfz-${CI_COMMIT_TAG:-prod-latest}" -f backend/Dockerfile \
          backend
    - docker push "$CI_REGISTRY_IMAGE/backend:gfz-${CI_COMMIT_TAG:-prod-latest}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TAG == null'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always

backup-gfz-staging:
  stage: backup
  environment:
    name: gfz-staging
    url: https://rz-vm64.gfz-potsdam.de
  tags:
    - deploy
    - staging
    - gfz
    - shell
  variables:
    COMPOSE_PROJECT_NAME: sms-staging
    VOCABULARY_SECRET_KEY: ${GFZ_STAGING_VOCABULARY_SECRET}
    VOCABULARY_DB_USER: ${GFZ_STAGING_VOCABULARY_POSTGRES_USER}
    VOCABULARY_DB_PASSWORD: ${GFZ_STAGING_VOCABULARY_POSTGRES_PASSWORD}
    MINIO_ROOT_USER: ${GFZ_STAGING_MINIO_ROOT_USER}
    MINIO_ROOT_PASSWORD: ${GFZ_STAGING_MINIO_ROOT_PASSWORD}
    BACKEND_DB_USER: ${GFZ_STAGING_BACKEND_POSTGRES_USER}
    BACKEND_DB_PASSWORD: ${GFZ_STAGING_BACKEND_POSTGRES_PASSWORD}
    BACKEND_SECRET_KEY: ${GFZ_STAGING_BACKEND_SECRET}
    OIDC_CLIENT_ID: ${GFZ_STAGING_OIDC_CLIENT_ID}
  before_script:
    # clean up & remove files older than 180 days
    - find /srv/docker/service/backend-db/backups -type f -mtime +180 -exec rm {} \;
    - find /srv/docker/service/vocabulary-db/backups -type f -mtime +180 -exec rm {} \;
  script:
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T vocabulary-db pg_dump -U $VOCABULARY_DB_USER -d vocabulary -Fc > /srv/docker/service/vocabulary-db/backups/vocabulary_$(date +%Y%m%d-%H%M)_${CI_COMMIT_SHORT_SHA}.dump
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T backend-db pg_dump -U $BACKEND_DB_USER -d backend -Fc > /srv/docker/service/backend-db/backups/backend_$(date +%Y%m%d-%H%M)_${CI_COMMIT_SHORT_SHA}.dump
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always

backup-gfz-prod:
  stage: backup
  environment:
    name: gfz-prod
    url: https://sensors.gfz-potsdam.de
  tags:
    - deploy
    - prod
    - gfz
    - shell
  variables:
    COMPOSE_PROJECT_NAME: sms-prod
    VOCABULARY_SECRET_KEY: ${GFZ_PROD_VOCABULARY_SECRET}
    VOCABULARY_DB_USER: ${GFZ_PROD_VOCABULARY_POSTGRES_USER}
    VOCABULARY_DB_PASSWORD: ${GFZ_PROD_VOCABULARY_POSTGRES_PASSWORD}
    MINIO_ROOT_USER: ${GFZ_PROD_MINIO_ROOT_USER}
    MINIO_ROOT_PASSWORD: ${GFZ_PROD_MINIO_ROOT_PASSWORD}
    BACKEND_DB_USER: ${GFZ_PROD_BACKEND_POSTGRES_USER}
    BACKEND_DB_PASSWORD: ${GFZ_PROD_BACKEND_POSTGRES_PASSWORD}
    BACKEND_SECRET_KEY: ${GFZ_PROD_BACKEND_SECRET}
    OIDC_CLIENT_ID: ${GFZ_PROD_OIDC_CLIENT_ID}
  before_script:
    # clean up & remove files older than 180 days
    - find /srv/docker/service/backend-db/backups -type f -mtime +180 -exec rm {} \;
    - find /srv/docker/service/vocabulary-db/backups -type f -mtime +180 -exec rm {} \;
  script:
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml exec -T vocabulary-db pg_dump -U $VOCABULARY_DB_USER -d vocabulary -Fc > /srv/docker/service/vocabulary-db/backups/vocabulary_$(date +%Y%m%d-%H%M)_${CI_COMMIT_SHORT_SHA}.dump
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml exec -T backend-db pg_dump -U $BACKEND_DB_USER -d backend -Fc > /srv/docker/service/backend-db/backups/backend_$(date +%Y%m%d-%H%M)_${CI_COMMIT_SHORT_SHA}.dump
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_COMMIT_TAG == null'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always

deploy-gfz-staging:
  stage: deploy
  environment:
    name: gfz-staging
    url: https://rz-vm64.gfz-potsdam.de
  tags:
    - deploy
    - staging
    - gfz
    - shell
  variables:
    COMPOSE_PROJECT_NAME: sms-staging
    VOCABULARY_SECRET_KEY: ${GFZ_STAGING_VOCABULARY_SECRET}
    VOCABULARY_DB_USER: ${GFZ_STAGING_VOCABULARY_POSTGRES_USER}
    VOCABULARY_DB_PASSWORD: ${GFZ_STAGING_VOCABULARY_POSTGRES_PASSWORD}
    MINIO_ROOT_USER: ${GFZ_STAGING_MINIO_ROOT_USER}
    MINIO_ROOT_PASSWORD: ${GFZ_STAGING_MINIO_ROOT_PASSWORD}
    BACKEND_DB_USER: ${GFZ_STAGING_BACKEND_POSTGRES_USER}
    BACKEND_DB_PASSWORD: ${GFZ_STAGING_BACKEND_POSTGRES_PASSWORD}
    BACKEND_SECRET_KEY: ${GFZ_STAGING_BACKEND_SECRET}
    OIDC_CLIENT_ID: ${GFZ_STAGING_OIDC_CLIENT_ID}
  before_script:
    - *docker_login_gitlab_registry
  script:
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml down --remove-orphans
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml rm -f
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml pull
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml up -d
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T vocabulary python3 manage.py migrate
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T vocabulary python3 manage.py loaddata initial_data.json
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T vocabulary python3 manage.py loaddata default_community_data.json
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T vocabulary python3 manage.py loaddata hydro_community_data.json
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T vocabulary python3 manage.py collectstatic --no-input
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T backend python3 manage.py db upgrade
    - sleep 1m
    - docker-compose -f docker/deployment/gfz/staging/docker-compose.yml exec -T backend python3 manage.py es reindex
    - docker rmi $(docker images -q -f dangling=true) || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always

deploy-gfz-prod:
  stage: deploy
  environment:
    name: gfz-prod
    url: https://sensors.gfz-potsdam.de
  tags:
    - deploy
    - prod
    - gfz
    - shell
  variables:
    COMPOSE_PROJECT_NAME: sms-prod
    VOCABULARY_SECRET_KEY: ${GFZ_PROD_VOCABULARY_SECRET}
    VOCABULARY_DB_USER: ${GFZ_PROD_VOCABULARY_POSTGRES_USER}
    VOCABULARY_DB_PASSWORD: ${GFZ_PROD_VOCABULARY_POSTGRES_PASSWORD}
    MINIO_ROOT_USER: ${GFZ_PROD_MINIO_ROOT_USER}
    MINIO_ROOT_PASSWORD: ${GFZ_PROD_MINIO_ROOT_PASSWORD}
    BACKEND_DB_USER: ${GFZ_PROD_BACKEND_POSTGRES_USER}
    BACKEND_DB_PASSWORD: ${GFZ_PROD_BACKEND_POSTGRES_PASSWORD}
    BACKEND_SECRET_KEY: ${GFZ_PROD_BACKEND_SECRET}
    OIDC_CLIENT_ID: ${GFZ_PROD_OIDC_CLIENT_ID}
  before_script:
    - *docker_login_gitlab_registry
  script:
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml down --remove-orphans
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml rm -f
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml pull
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml up -d
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml exec -T vocabulary python3 manage.py migrate
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml exec -T vocabulary python3 manage.py loaddata initial_data.json
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml exec -T vocabulary python3 manage.py loaddata default_community_data.json
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml exec -T vocabulary python3 manage.py loaddata hydro_community_data.json
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml exec -T vocabulary python3 manage.py collectstatic --no-input
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml exec -T backend python3 manage.py db upgrade
    - sleep 1m
    - docker-compose -f docker/deployment/gfz/prod/docker-compose.yml exec -T backend python3 manage.py es reindex
    - docker rmi $(docker images -q -f dangling=true) || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TAG == null'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
