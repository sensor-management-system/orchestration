# SPDX-FileCopyrightText: 2021 - 2024
# - Kotyba Alhaj Taha <kotyba.alhaj-taha@ufz.de>
# - Nils Brinckmann <nils.brinckmann@gfz-potsdam.de>
# - Tobias Kuhnert <tobias.kuhnert@ufz.de>
# - Helmholtz Centre Potsdam - GFZ German Research Centre for Geosciences (GFZ, https://www.gfz-potsdam.de)
# - Helmholtz Centre for Environmental Research GmbH - UFZ (UFZ, https://www.ufz.de)
#
# SPDX-License-Identifier: EUPL-1.2

version: '3.9'
services:

  elastic-search:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    container_name: sms_es
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Dlog4j2.formatMsgNoLookups=true"
      - cluster.routing.allocation.disk.threshold_enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - sms

  backend:
    image: python:3.11-slim-buster
    restart: unless-stopped
    container_name: sms_backend
    working_dir: /usr/src/app
    volumes:
      - './backend/app:/usr/src/app'
    ports:
      - "5000:5000"
    environment:
      SMS_VERSION: ${SMS_VERSION:-develop}
      FLASK_DEBUG: ${FLASK_DEBUG:-1}
      URL_PREFIX: ${URL_PREFIX:-/backend/api/v1}
      STATIC_URL: ${STATIC_URL:-/static/backend}
      APP_SETTINGS: ${APP_SETTINGS:-project.config.DevelopmentConfig}
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL:-http://elastic-search:9200}
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5433/db_dev}
      DATABASE_TEST_URL: ${DATABASE_TEST_URL:-postgresql://postgres:postgres@db:5433/db_test}
      OIDC_USERNAME_CLAIM: ${OIDC_USERNAME_CLAIM:-eduperson_principal_name}
      HTTP_ORIGINS: ${HTTP_ORIGINS:-http://localhost}
      WELL_KNOWN_URL: ${WELL_KNOWN_URL_BACKEND:-http://nginx/keycloak/realms/local-dev/.well-known/openid-configuration}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-admin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minio123}
      MINIO_SECURE: ${MINIO_SECURE:-False}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-sms-attachments}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      DOWNLOAD_ENDPOINT: ${DOWNLOAD_ENDPOINT:-http://localhost}
      ALLOWED_MIME_TYPES: ${ALLOWED_MIME_TYPES:-application/x-abiword,application/x-freearc,application/vnd.amazon.ebook,image/bmp,application/x-bzip,application/x-bzip2,text/csv,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/epub+zip,application/gzip,image/gif,text/html,image/vnd.microsoft.icon,text/calendar,image/jpeg,application/json,application/ld+json,application/vnd.oasis.opendocument.presentation,application/vnd.oasis.opendocument.spreadsheet,application/vnd.oasis.opendocument.text,image/png,application/pdf,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation,application/vnd.rar,application/rtf,image/svg+xml,application/x-tar,image/tiff,image/tiff,text/plain,image/webp,application/xhtml+xml,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/xml,application/vnd.mozilla.xul+xml,application/zip,application/x-7z-compressed}
      IDL_URL: ${IDL_URL:-http://idl:8000/idl/api/idl}
      SMS_IDL_TOKEN: ${SMS_IDL_TOKEN:-x214-gdfg-dfge-r34s-cvg8-7999}
      CV_URL: ${CV_URL:-http://localhost/cv/api/v1}
      CV_URL_BACKEND_ACCESS: http://vocabulary:8000/${CV_BASE_URL:-cv/}api/v1
      INSTITUTE: ${INSTITUTE:-ufz}
      PKCE_SCOPES: ${NUXT_ENV_SCOPE:-openid profile eduperson_principal_name email offline_access}
      SMS_BACKEND_URL: ${SMS_BACKEND_URL:-/backend/api/v1}
      PKCE_CLIENT_ID: ${NUXT_ENV_CLIENT_ID:-sms-client}
      SMS_FRONTEND_URL: ${SMS_FRONTEND_URL:-http://localhost}
      PID_SERVICE_URL: ${PID_SERVICE_URL:-}
      PID_SERVICE_USER: ${PID_SERVICE_USER:-}
      PID_SERVICE_PASSWORD: ${PID_SERVICE_PASSWORD:-}
      SCHEMA_VERSION: ${SCHEMA_VERSION:-0.1}
      IDENTIFIER_TYPE: ${IDENTIFIER_TYPE:-Handler}
      PID_SUFFIX: ${PID_SUFFIX:-SMS}
      PID_PREFIX: ${PID_PREFIX:-}
      TSM_ENDPOINTS: "${TSM_ENDPOINTS:-[{\"fields\": {\"name\": \"Demo TSM\", \"url\": \"http://localhost/tsmdl\"}, \"model\": \"TsmEndpoint\", \"pk\": 99}]}"
      B2INST_URL: ${B2INST_URL:-https://b2inst-test.gwdg.de}
      B2INST_COMMUNITY: ${B2INST_COMMUNITY:-DataHub-Helmholtz-RF-EE}
      B2INST_TOKEN: ${B2INST_TOKEN:-}
      EXPORT_CONTROL_VO_LIST: ${EXPORT_CONTROL_VO_LIST:-Exportcontrol}
      # Most of the OIDC related entries are extracted using the well known url.
      # In cases with an external auth server, this works fine for all the data,
      # as both the backend service and the frontend (if we return links in documents)
      # can access this server.
      # For cases where the frontend can't access this server (local keycloak in
      # the docker compose for example), we need an extra env variable to
      # let the backend know which url to give to the frontend.
      OIDC_TOKEN_ENDPOINT_FOR_FRONTEND: ${OIDC_TOKEN_ENDPOINT_FOR_FRONTEND:-http://localhost/keycloak/realms/local-dev/protocol/openid-connect/token}
    depends_on:
      - db
      - keycloak
    entrypoint: /usr/src/app/entrypoint-dev.sh
    networks:
      - sms

  db:
    image: postgis/postgis:12-3.3-alpine
    container_name: sms_db
    ports:
      - "5433:5433"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./backend/app/project/db/create.sql:/docker-entrypoint-initdb.d/create.sql
      - ./sql:/mnt/sql
    networks:
      - sms
    command: -p 5433

  vocabulary:
    image: python:3.11-alpine
    container_name: sms_cv
    working_dir: /usr/cv/app
    volumes:
      - './sms-cv/src:/usr/cv/app'
      - static-files:/static/cv
    ports:
      - 8000:8000
    environment:
      CV_BASE_URL: ${CV_BASE_URL:-cv/}
      STATIC_URL: ${CV_STATIC_URL:-/static/cv/}
      STATIC_ROOT: ${CV_STATIC_ROOT:-/static/cv/}
      DEBUG: ${DEBUG:-1}
      SECRET_KEY: ${SECRET_KEY:-TopSecret}
      SQL_ENGINE: ${SQL_ENGINE:-django.db.backends.postgresql_psycopg2}
      SQL_DATABASE: ${SQL_DATABASE:-postgres}
      SQL_USER: ${SQL_USER:-postgres}
      SQL_PASSWORD: ${SQL_PASSWORD:-postgres}
      SQL_HOST: ${SQL_HOST:-db}
      SQL_PORT: ${SQL_PORT:-5433}
      CORS_ORIGIN_WHITELIST: ${CORS_ORIGIN_WHITELIST:-http://localhost}
      EMAIL_HOST: ${EMAIL_HOST:-}
      OIDC_WELL_KNOWN_URLS: "${WELL_KNOWN_URLS_CV:-http://nginx/keycloak/realms/local-dev/.well-known/openid-configuration}"
    entrypoint: ./entrypoint-dev.sh
    networks:
      - sms
    depends_on:
      - db

  frontend:
    image: node:18.18.0-buster
    container_name: sms_frontend
    working_dir: /home/node/
    user: "node"
    networks:
      - sms
    ports:
      - 3000:3000
    environment:
      SMS_VERSION: ${SMS_VERSION:-develop}
      BASE_URL: ${BASE_URL:-/}
      SMS_BACKEND_URL: ${SMS_BACKEND_URL:-/backend/api/v1}
      CV_BACKEND_URL: ${CV_BACKEND_URL:-/cv/api/v1}
      NUXT_ENV_CLIENT_ID: ${NUXT_ENV_CLIENT_ID:-sms-client}
      # We reuse here the variable defined for the backend
      NUXT_ENV_OIDC_WELL_KNOWN: ${WELL_KNOWN_URL_FRONTEND:-http://localhost/keycloak/realms/local-dev/.well-known/openid-configuration}
      STAY_WITH_HTTP: "${STAY_WITH_HTTP:-true}"
      NUXT_ENV_ALLOWED_MIMETYPES: ${ALLOWED_MIME_TYPES:-application/x-abiword,application/x-freearc,application/vnd.amazon.ebook,image/bmp,application/x-bzip,application/x-bzip2,text/csv,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/epub+zip,application/gzip,image/gif,text/html,image/vnd.microsoft.icon,text/calendar,image/jpeg,application/json,application/ld+json,application/vnd.oasis.opendocument.presentation,application/vnd.oasis.opendocument.spreadsheet,application/vnd.oasis.opendocument.text,image/png,application/pdf,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation,application/vnd.rar,application/rtf,image/svg+xml,application/x-tar,image/tiff,image/tiff,text/plain,image/webp,application/xhtml+xml,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/xml,application/vnd.mozilla.xul+xml,application/zip,application/x-7z-compressed}
      NUXT_ENV_SCOPE: ${NUXT_ENV_SCOPE:-openid profile eduperson_principal_name email offline_access}
      NUXT_ENV_OIDC_SCHEME: ${NUXT_ENV_OIDC_SCHEME:-true}
      NUXT_ENV_OIDC_REFRESH_TOKEN: ${NUXT_ENV_OIDC_REFRESH_TOKEN:-refresh_token}
      NUXT_ENV_OIDC_REFRESH_EXPIRE: ${NUXT_ENV_OIDC_REFRESH_EXPIRE:-2592000}
      NUXT_ENV_OIDC_RESPONSE_TYPE: ${NUXT_ENV_OIDC_RESPONSE_TYPE:-code}
      NUXT_ENV_OIDC_GRANT_TYPE: ${NUXT_ENV_OIDC_GRANT_TYPE:-authorization_code}
      NUXT_ENV_OIDC_CHALLANGE: ${NUXT_ENV_OIDC_CHALLANGE:-S256}
      NUXT_ENV_OIDC_REFRESH_INTERVAL_TIME: ${NUXT_ENV_OIDC_REFRESH_INTERVAL_TIME:-180000}
      NUXT_ENV_OIDC_LOGIN_PARAMS: "${NUXT_ENV_OIDC_LOGIN_PARAMS:-{\"params\": {\"prompt\": \"consent\"}}}"
      NUXT_ENV_PID_BASE_URL: ${NUXT_ENV_PID_BASE_URL:-https://hdl.handle.net}
      INSTITUTE: ${INSTITUTE:-ufz}
      IDL_SYNC_URL: ${IDL_SYNC_URL:-http://localhost/idl/api/hifis/sync-groups/}
    volumes:
      - ./frontend/:/home/node/
      - ./frontend/dist:/home/node/dist/:rw
    command: >
      bash -c "npm install
      && npm run dev"

  minio:
    image: minio/minio:RELEASE.2021-08-05T22-01-19Z
    container_name: sms_minio
    volumes:
      - minio-data:/data/minio
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      - sms
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_USER_PASSWORD:-minio123}
    #       To deactivate the console
#      MINIO_BROWSER: "off"
    command: server /data/minio --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc:RELEASE.2023-02-16T19-20-11Z
    container_name: sms_mc
    depends_on:
      - minio
    networks:
      - sms
    # Make a Bucket using minio client mc
    # https://docs.min.io/docs/minio-client-complete-guid
    entrypoint: >
      /bin/sh -c "
      until curl -f http://minio:9000/minio/health/live; do sleep 5; done;
      /usr/bin/mc  alias set minio http://minio:9000 ${MINIO_ACCESS_KEY:-admin} ${MINIO_SECRET_KEY:-minio123} --api S3v4;
      /usr/bin/mc mb --quiet minio/${MINIO_BUCKET_NAME:-sms-attachments};
      /usr/bin/mc anonymous set download minio/${MINIO_BUCKET_NAME:-sms-attachments};
      exit 0;
      "

  nginx:
    image: nginx:1.20-alpine
    container_name: sms_web
    ports:
      - 80:80
      - 443:443
      - 8443:8443
    networks:
      - sms
    volumes:
      - "./nginx/default.http.conf:/etc/nginx/conf.d/default.conf:ro"
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/locations.conf:/etc/nginx/locations.conf:ro
      - ./frontend/dist:/etc/nginx/html
      - static-files:/usr/share/nginx/html/static/cv:ro
      - ./backend/app/project/static:/usr/share/nginx/html/static/backend:ro
      - idl-static-files:/usr/share/nginx/html/static/idl:ro
    depends_on:
      - keycloak
      - idl
      - frontend
      - minio
      - vocabulary
      - backend
        
  keycloak:
    image: "quay.io/keycloak/keycloak:24.0.3"
    container_name: sms_keycloak
    expose:
      - "${KEYCLOAK_PORT:-8080}"
    user: "${KEYCLOAK_UID:-1000}:${KEYCLOAK_GID:-1000}"
    networks:
      - sms
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: ${KC_DB:-postgres}
      KC_DB_URL_DATABASE: ${KC_DB_URL_DATABASE:-keycloak}
      KC_DB_SCHEMA: ${KC_DB_SCHEMA:-public}
      KC_DB_URL: ${KC_DB_URL:-jdbc:postgresql://keycloak-db/keycloak}
      KC_DB_USERNAME: ${KC_DB_USERNAME:-keycloak}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD:-password}
      KC_HTTP_RELATIVE_PATH: ${KC_HTTP_RELATIVE_PATH:-/keycloak}
      KC_PROXY_HEADERS: ${KC_PROXY_HEADERS:-xforwarded}
      KC_HOSTNAME_STRICT: ${KC_HOSTNAME_STRICT:-false}
      KC_HOSTNAME_URL: ${KC_HOSTNAME_URL:-http://localhost/keycloak}
    volumes:
      - "./keycloak/keycloak-init.json:/opt/keycloak/data/import/keycloak-init.json"      
    command:
      - start-dev
      - --import-realm
      - --http-port=${KEYCLOAK_PORT:-8080}
    depends_on:
      - keycloak-db
    
  keycloak-db:
    image: "postgres:14-alpine"
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB_POSTGRES_DB:-keycloak}
      POSTGRES_USER: ${KEYCLOAK_DB_POSTGRES_USER:-keycloak}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_POSTGRES_PASSWORD:-password}
    networks:
      - sms
    volumes:
      - "keycloak-data:/var/lib/postgresql/data/"
  
  idl:
    image: "registry.hzdr.de/hub-terra/sms/gfz-idl/backend:latest"
    container_name: idl
    networks:
      - sms
    environment:
      DJANGO_DEBUG: "${IDL_DJANGO_DEBUG:-1}"
      DJANGO_ALLOWED_HOSTS: "${IDL_DJANGO_ALLOWED_HOSTS:-idl localhost}"
      IDL_TOKEN: "${IDL_TOKEN:-x214-gdfg-dfge-r34s-cvg8-7999}"
      OIDC_WELL_KNOWN_URL: "${WELL_KNOWN_URL_BACKEND:-http://nginx/keycloak/realms/local-dev/.well-known/openid-configuration}"
      VO_ADMIN_CONVENTIONS: "${VO_ADMIN_CONVENTIONS:-*:admin}"
      VO_MEMBER_CONVENTIONS: "${VO_MEMBER_CONVENTIONS:-*:member}"
      DJANGO_DB_ENGINE: "${IDL_DJANGO_DB_ENGINE:-django.db.backends.postgresql}"
      DJANGO_DB_NAME: "${IDL_DJANGO_DB_NAME:-postgres}"
      DJANGO_DB_USER: "${IDL_DJANGO_DB_USER:-postgres}"
      DJANGO_DB_PASSWORD: "${IDL_DJANGO_DB_PASSWORD:-postgres}"
      DJANGO_DB_HOST: "${IDL_DJANGO_DB_HOST:-sms_idl_db}"
      DJANGO_DB_PORT: "${IDL_DJANGO_DB_PORT:-5432}"
      DJANGO_STATIC_ROOT: ${IDL_DJANGO_STATIC_ROOT:-/static/idl/}
      DJANGO_STATIC_URL: ${IDL_DJANGO_STATIC_URL:-/static/idl/}
      DJANGO_BASE_PATH: ${IDL_DJANGO_BASE_PATH:-idl/}
      DJANGO_CSRF_TRUSTED_ORIGINS: "${IDL_DJANGO_CSRF_TRUSTED_ORIGINS:-http://idl http://localhost}"
    volumes:
      - idl-static-files:/static/idl
    depends_on:
      idl-db:
        condition: service_healthy
      
  idl-db:
    image: postgres:14.1-alpine3.14
    container_name: sms_idl_db
    networks:
      - sms
    logging:
      driver: json-file
      options:
        max-size: 50m
    environment:
      POSTGRES_PASSWORD: "${IDL_DB_POSTGRES_NAME:-postgres}"
      POSTGRES_USER: "${IDL_DB_POSTGRES_USER:-postgres}"
      POSTGRES_DB: "${IDL_DB_POSTGRES_PASSWORD:-postgres}"
    volumes:
      - "idl_dev_db_data:/var/lib/postgresql/data"
    shm_size: 128M
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${IDL_DB_POSTGRES_USER:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  tsmdl:
    image: "registry.hzdr.de/hub-terra/sms/tsmdl-mock:latest"
    networks:
      - sms

volumes:
  esdata01:
    driver: local
  minio-data: {}
  static-files: {}
  idl_dev_db_data: {}
  keycloak-data:
  idl-static-files: {}

networks:
  sms:
    name: sms-docker-network
