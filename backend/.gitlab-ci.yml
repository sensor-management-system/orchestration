# SPDX-FileCopyrightText: 2020 - 2024
# - Martin Abbrent <martin.abbrent@ufz.de>
# - Kotyba Alhaj Taha <kotyba.alhaj-taha@ufz.de>
# - Wilhelm Becker <wilhelm.becker@gfz-potsdam.de>
# - Hannes Bohring <hannes.bohring@ufz.de>
# - Nils Brinckmann <nils.brinckmann@gfz-potsdam.de>
# - Tobias Kuhnert <tobias.kuhnert@ufz.de>
# - Norman Ziegner <norman.ziegner@ufz.de>
# - Helmholtz Centre Potsdam - GFZ German Research Centre for Geosciences (GFZ, https://www.gfz-potsdam.de)
# - Helmholtz Centre for Environmental Research GmbH - UFZ (UFZ, https://www.ufz.de)
#
# SPDX-License-Identifier: EUPL-1.2

stages:
  - build
  - extract
  - test
  - release
  - deploy

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:test-$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  CONTAINER_RELEASE_TAG_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  DATABASE_TEST_URL: postgresql://$POSTGRES_USER:@$POSTGRES_PASSWORD:5432/$POSTGRES_DB
  WELL_KNOWN_URL: https://webapp.ufz.de/idp/oidc/v1/.well-known/openid-configuration
  HTTP_ORIGINS: "https://registry.hzdr.de http://rdm-test.intranet.ufz.de:5002"
  OIDC_USERNAME_CLAIM: "sub"
  ALLOWED_MIME_TYPES: "application/x-abiword,application/x-freearc,application/vnd.amazon.ebook,image/bmp,application/x-bzip,application/x-bzip2,text/csv,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/epub+zip,application/gzip,image/gif,text/html,image/vnd.microsoft.icon,text/calendar,image/jpeg,application/json,application/ld+json,application/vnd.oasis.opendocument.presentation,application/vnd.oasis.opendocument.spreadsheet,application/vnd.oasis.opendocument.text,image/png,application/pdf,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation,application/vnd.rar,application/rtf,image/svg+xml,application/x-tar,image/tiff,image/tiff,text/plain,image/webp,application/xhtml+xml,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/xml,application/vnd.mozilla.xul+xml,application/zip,application/x-7z-compressed"

.docker_login: &docker_login
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.docker-in-docker:
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  before_script:
    - *docker_login
  tags:
    - docker

build-image:
  stage: build
  extends: .docker-in-docker
  script:
    - echo "ENV WELL_KNOWN_URL" $WELL_KNOWN_URL >> $CI_PROJECT_DIR/Dockerfile.ci
    - echo "ENV HTTP_ORIGINS" $HTTP_ORIGINS >> $CI_PROJECT_DIR/Dockerfile.ci
    - echo "ENV OIDC_USERNAME_CLAIM" $OIDC_USERNAME_CLAIM >> $CI_PROJECT_DIR/Dockerfile.ci
    - echo "ENV CV_URL https://webapp-stage.intranet.ufz.de/sms/cv/api/v1" >> $CI_PROJECT_DIR/Dockerfile.ci
    - docker build --tag $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

build-image-nginx-ufz:
  stage: build
  extends: .docker-in-docker
  allow_failure: true
  script:
    - >
      if [ -z "$CI_COMMIT_TAG" ]; then
        docker build --tag "$CI_REGISTRY_IMAGE/nginx:ufz-latest" -f docker/build/nginx/ufz/Dockerfile .
        docker push "$CI_REGISTRY_IMAGE/nginx:ufz-latest"
      else
        docker build --tag "$CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_TAG" --tag "$CI_REGISTRY_IMAGE/nginx:ufz-latest" -f docker/build/nginx/ufz/Dockerfile .
        docker push "$CI_REGISTRY_IMAGE/nginx:ufz-latest"
        docker push "$CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_TAG"
      fi
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    - if: '$CI_COMMIT_REF_PROTECTED && $CI_COMMIT_TAG =~ /^ufz-.*/'

release-image:
  stage: release
  extends: .docker-in-docker
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

release-ufz-tag-image-stage:
  stage: release
  extends: .docker-in-docker
  variables:
    OIDC_CLIENT_ID: ${UFZ_OIDC_CLIENT_ID}
    PID_CERT_FILE: ${UFZ_STAGE_PID_CERT_FILE}
    PID_CERT_KEY: ${UFZ_STAGE_PID_CERT_KEY}
  rules:
    - if: $CI_COMMIT_TAG =~ /^ufz-stage-\d+\.\d+\.\d+$/
  script:
    - |
      docker build --tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" -f docker/deployment/ufz/Dockerfile_Stage \
        --build-arg OIDC_CLIENT_ID_ARG=$OIDC_CLIENT_ID \
        --build-arg PID_CERT_FILE_ARG=$PID_CERT_FILE \
        --build-arg PID_CERT_KEY_ARG=$PID_CERT_KEY \
        --build-arg BUILD_DATE=$(date --utc +%FT%TZ) \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
      .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

release-ufz-tag-image-prod:
  stage: release
  extends: .docker-in-docker
  variables:
    OIDC_CLIENT_ID: ${UFZ_OIDC_CLIENT_ID}
    PID_CERT_FILE: ${UFZ_PROD_PID_CERT_FILE}
    PID_CERT_KEY: ${UFZ_PROD_PID_CERT_KEY}
  rules:
    - if: $CI_COMMIT_TAG =~ /^ufz-prod-\d+\.\d+\.\d+$/
  script:
    - |
      docker build --tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" -f docker/deployment/ufz/Dockerfile_Prod \
        --build-arg OIDC_CLIENT_ID_ARG=$OIDC_CLIENT_ID \
        --build-arg PID_CERT_FILE_ARG=$PID_CERT_FILE \
        --build-arg PID_CERT_KEY_ARG=$PID_CERT_KEY \
        --build-arg BUILD_DATE=$(date --utc +%FT%TZ) \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
      .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
